#summary test
#labels Metamodel,UIBPEL

= Introduction =

In this article, we describe the UI BPEL meta-model. This meta-model is a extension for BPEL, in order to modelize any type of user interaction within a BPEL process. The UI BPEL meta-model defines new data interaction activities to allow user providing, selecting or getting data. The extension also proposes new types of interaction events to react when user interaction is carried out.

More information:
 Yet Another BPEL Extension for User Interactions (description and link)

= User Interactions =

Any computer system that involves users needs UIs to allow interactions between the user and the system. Based [usixml] and [maria], we identified 2 types of user interactions, namely: _data interaction_ and _interaction by user event_. In the following, we describe each type of them.

== Data Interaction==

The data interaction is the most basic user interaction. This type of interaction represents any user interaction that directly modifies the data flow in the process. The data flow consists of the sources and destinations in the process that extract and load data, the transformations that modify and extend data, and the paths that link sources, transformations, and destinations. There are three basic subcategories for this type of user interaction:

 * _Data input interaction_ represents the fact that the user provides data to a Web service at runtime. For example, users provide the license number to a car renting Web service;
 * _Data output interaction_ represents the fact that a Web service composition makes available data to the user. For example, the trip scheduling Web service composition presents the car renting price to the users;
 * _Data selection_ represents the fact that the user can select a data from a set of data. For example, users can select between flight or driving as the mode of transportation for their trip.

== Interaction by User Event==

A user event is a user interaction that changes the control flow of the process. The control flow consists in the different paths that might be traversed through the process during its execution. An example of an interaction by user event is the cancelation process, where the user can cancel the execution of the Web service composition at any time.

The data interactions (input, output and selection) can change the control flow (e.g. the selection of a branch of execution is done based on data), as well as the interactions by user events can change the data flow (e.g. the data processing depends on the selected branch of execution). However, the distinction among the types of user interaction is fundamental, since each type of interaction must be mapped in different components in the user interface (e.g. text box or label for data interaction and button for interaction by event).

= UI BPEL Metamodel =

UI-BPEL extends the BPEL by adding new data interaction activities and a new type of interaction events. The following figure presents an overview of the UI BPEL meta-model. It shows the classes that model the user interactions and their relationships with some relevant classes of the BPEL meta-model.

<img src=http://svn.codespot.com/a/eclipselabs.org/bpel-ui/wiki/images/bpel-ui_metamodel.png title="UI BPEL meta-model" width=500>

This meta-model can be divided in 2 parts _data interaction_ representation and _interaction by user event_ representation. The class _User Interaction_ represents the common characteristics among these parts. This class has the following properties:
 * *id*: this id has a unique value in order to identify any _User Interaction_.
 * *roles*: the set of user IDs that identifies which users can perform the user interactions.

In the following, we present the classes responsible to deal with the _data interaction_:

 * _Data Interaction_ is a generalization class that represents a new _data interaction_.
 * _Data Item_ is a class that represents the data involved in the user interaction. The current version just can represent data as simple type. This class has the following properties:
    * *description* identifies the meaning of the item.
    * *type* represents the type of the item. The type of a _Data Item_ can be: string, integer, boolean, and date.
 * _Data Input UI_ is a class that represents the data input activity. This activity is similar to the BPEL _Receive Activity_, since it suspends the process execution while waiting for an input from the user. However, unlike the _BPEL Receive_ activity, this activity waits for a message from the UI with the data provided by the user, instead of a message from another Web service. 
    * *inputVariable* represents the variable where the data provided by the user will be stored.
 * _Data Output UI_ is a class that represents the data output activity.
    * *outputVariable* specifies which variable contains data to be presented to the user.
 * _Data Selection UI_ is a class that represents the data selection activity. This activity allows the user to select one value (or a subset of values) from a set of values of a specific variable. Like DataInputUI , the DataSelectionUI activity suspends the execution of the process until receiving the data from the user. 
    * *minCardinality* identifies how many values from the *inputVariable* must be selected at least.
    * *maxCardinality* identifies the maximum number of elements have to be selected.

In the following, we present the classes responsible to deal with the _interaction by user event_:

 * _Pick UI_ is a extension to the _Pick Activity_ that can receive additionally _User Events_.
 * _Scope UI_ is a extension to the _Scope Activity_ that allows _User Events_.
 * _Event Handler UI_ is a extension to the _Event Handler_ that can receive additionally _User Events_.
 * _On User Event_ is class that represents a new event on BPEL that defines the occurrence of a user interaction.