package be.ac.fundp.uimanager.userevent.client;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.5.0
 * 2011-11-20T20:38:12.403+01:00
 * Generated source version: 2.5.0
 *
 * @author Waldemar Pires Ferreira Neto (waldemar.neto@fundp.ac.be)
 * @date Dec 9, 2011
 */
@WebServiceClient(name = "UserEventListner", 
                  wsdlLocation = "http://localhost:8080/ode/processes/UserEventListner?wsdl",
                  targetNamespace = "http://precise.fundp.ac.be/UserEventListener/") 
public class UserEventListner extends Service {

    /** The Constant WSDL_LOCATION. */
    public final static URL WSDL_LOCATION;

    /** The Constant SERVICE. */
    public final static QName SERVICE = new QName("http://precise.fundp.ac.be/UserEventListener/", "UserEventListner");
    
    /** The Constant UserEventListnerSOAP11PortHttp. */
    public final static QName UserEventListnerSOAP11PortHttp = new QName("http://precise.fundp.ac.be/UserEventListener/", "UserEventListnerSOAP11port_http");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8080/ode/processes/UserEventListner?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(UserEventListner.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://localhost:8080/ode/processes/UserEventListner?wsdl");
        }
        WSDL_LOCATION = url;
    }

    /**
     * Instantiates a new user event listner.
     *
     * @param wsdlLocation the wsdl location
     */
    public UserEventListner(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    /**
     * Instantiates a new user event listner.
     *
     * @param wsdlLocation the wsdl location
     * @param serviceName the service name
     */
    public UserEventListner(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    /**
     * Instantiates a new user event listner.
     */
    public UserEventListner() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     * Gets the user event listner soa p11 port http.
     *
     * @return the user event listner soa p11 port http
     * returns UserEventListnerPortType
     */
    @WebEndpoint(name = "UserEventListnerSOAP11port_http")
    public UserEventListnerPortType getUserEventListnerSOAP11PortHttp() {
        return super.getPort(UserEventListnerSOAP11PortHttp, UserEventListnerPortType.class);
    }

    /**
     * Gets the user event listner soa p11 port http.
     *
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return the user event listner soa p11 port http
     * returns UserEventListnerPortType
     */
    @WebEndpoint(name = "UserEventListnerSOAP11port_http")
    public UserEventListnerPortType getUserEventListnerSOAP11PortHttp(WebServiceFeature... features) {
        return super.getPort(UserEventListnerSOAP11PortHttp, UserEventListnerPortType.class, features);
    }

}
