//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.03.01 at 09:52:26 AM CET 
//


package be.ac.fundp.precise.processDeployment.auiDeployment.codeGenerator.xml;

import javax.xml.bind.annotation.XmlRegistry;


// TODO: Auto-generated Javadoc
/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the be.ac.fundp.precise.ui_bpel.ui.transformation.aui.serialization.xml package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {


    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: be.ac.fundp.precise.ui_bpel.ui.transformation.aui.serialization.xml
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link AbstractListener }.
     *
     * @return the abstract listener
     */
    public AbstractListener createAbstractListener() {
        return new AbstractListener();
    }

    /**
     * Create an instance of {@link Rule }.
     *
     * @return the rule
     */
    public Rule createRule() {
        return new Rule();
    }

    /**
     * Create an instance of {@link ActionExpression }.
     *
     * @return the action expression
     */
    public ActionExpression createActionExpression() {
        return new ActionExpression();
    }

    /**
     * Create an instance of {@link AbstractSelectionIU }.
     *
     * @return the abstract selection iu
     */
    public AbstractSelectionIU createAbstractSelectionIU() {
        return new AbstractSelectionIU();
    }

    /**
     * Create an instance of {@link Condition }.
     *
     * @return the condition
     */
    public Condition createCondition() {
        return new Condition();
    }

    /**
     * Create an instance of {@link AtomicEvent }.
     *
     * @return the atomic event
     */
    public AtomicEvent createAtomicEvent() {
        return new AtomicEvent();
    }

    /**
     * Create an instance of {@link AbstractDataIU }.
     *
     * @return the abstract data iu
     */
    public AbstractDataIU createAbstractDataIU() {
        return new AbstractDataIU();
    }

    /**
     * Create an instance of {@link AbstractUIModel }.
     *
     * @return the abstract ui model
     */
    public AbstractUIModel createAbstractUIModel() {
        return new AbstractUIModel();
    }

    /**
     * Create an instance of {@link AbstractInteractionUnit }.
     *
     * @return the abstract interaction unit
     */
    public AbstractInteractionUnit createAbstractInteractionUnit() {
        return new AbstractInteractionUnit();
    }

    /**
     * Create an instance of {@link TemporalActionExpression }.
     *
     * @return the temporal action expression
     */
    public TemporalActionExpression createTemporalActionExpression() {
        return new TemporalActionExpression();
    }

    /**
     * Create an instance of {@link State }.
     *
     * @return the state
     */
    public State createState() {
        return new State();
    }

    /**
     * Create an instance of {@link TemporalEventExpression }.
     *
     * @return the temporal event expression
     */
    public TemporalEventExpression createTemporalEventExpression() {
        return new TemporalEventExpression();
    }

    /**
     * Create an instance of {@link EventExpression }.
     *
     * @return the event expression
     */
    public EventExpression createEventExpression() {
        return new EventExpression();
    }

    /**
     * Create an instance of {@link Transition }.
     *
     * @return the transition
     */
    public Transition createTransition() {
        return new Transition();
    }

    /**
     * Create an instance of {@link AbstractTriggerIU }.
     *
     * @return the abstract trigger iu
     */
    public AbstractTriggerIU createAbstractTriggerIU() {
        return new AbstractTriggerIU();
    }

    /**
     * Create an instance of {@link AbstractElementaryIU }.
     *
     * @return the abstract elementary iu
     */
    public AbstractElementaryIU createAbstractElementaryIU() {
        return new AbstractElementaryIU();
    }

    /**
     * Create an instance of {@link AbstractCompoundIU }.
     *
     * @return the abstract compound iu
     */
    public AbstractCompoundIU createAbstractCompoundIU() {
        return new AbstractCompoundIU();
    }

    /**
     * Create an instance of {@link AtomicAction }.
     *
     * @return the atomic action
     */
    public AtomicAction createAtomicAction() {
        return new AtomicAction();
    }

    /**
     * Create an instance of {@link AbstractLocalization }.
     *
     * @return the abstract localization
     */
    public AbstractLocalization createAbstractLocalization() {
        return new AbstractLocalization();
    }

    /**
     * Create an instance of {@link Justification }.
     *
     * @return the justification
     */
    public Justification createJustification() {
        return new Justification();
    }

}
