package be.ac.fundp.precise.processMediation.userEvent.webService;

import java.util.List;
import java.util.logging.Logger;

import javax.xml.ws.Holder;

import be.ac.fundp.precise.clientAppMediation.ClientAppMediationManager;
import be.ac.fundp.precise.dataManagment.CoordinatedData;
import be.ac.fundp.precise.dataManagment.DataManager;
import be.ac.fundp.precise.processMediation.userEvent.SoapServerUtil;

/**
 * This class was generated by Apache CXF 2.5.0
 * 2012-04-26T16:14:48.963+02:00
 * Generated source version: 2.5.0
 * 
 */

@javax.jws.WebService(serviceName = "UiManager",
                      portName = "UiManagerSOAP",
                      targetNamespace = "http://fundp.ac.be/UiManager/",
                      wsdlLocation = "http://localhost:8090/UiManager/services/UiManagerSOAP?wsdl",
                      endpointInterface = "be.ac.fundp.precise.processMediation.userEvent.webService.UiManager")
                      
public class UiManagerImpl implements UiManager {

    private static final Logger LOG = Logger.getLogger(UiManagerImpl.class.getName());
    
    private ClientAppMediationManager clientMediator = ClientAppMediationManager.getInstance();

    /* (non-Javadoc)
     * @see be.ac.fundp.precise.processMediation.userEvent.webService.UiManager#inputOperation(String  userInteracId ,)String  role ,)String  processId ,)List<UiDataType>  data )*
     */
    public void inputOperation(Holder<String> userInteracId,Holder<String> role,Holder<String> processId,Holder<List<UiDataType>> data) { 
    	LOG.info("Executing operation inputOperation");
    	System.out.println("INPUTTTTTTTTT");
        System.out.println(userInteracId.value);
        System.out.println(role.value);
        System.out.println(processId.value);
        try {
        	List<CoordinatedData> reponse = clientMediator.requireInputInteraction(role.value, processId.value, userInteracId.value);
        	data.value = SoapServerUtil.providedData2UiDataType(reponse);
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see be.ac.fundp.precise.processMediation.userEvent.webService.UiManager#selectionOperation(String  userInteracId ,)String  role ,)String  processId ,)List<UiDataType>  data )*
     */
    public void selectionOperation(Holder<String> userInteracId,Holder<String> role,Holder<String> processId,Holder<List<UiDataType>> data) { 
    	LOG.info("Executing operation selectionOperation");
        System.out.println(userInteracId.value);
        System.out.println(role.value);
        System.out.println(processId.value);
        System.out.println(data);
        try {
        	List<CoordinatedData> reponse = clientMediator.requireSelectionInteracion(processId.value, userInteracId.value, SoapServerUtil.uiDataType2ProvidedData(data.value), role.value);
            data.value = SoapServerUtil.providedData2UiDataType(reponse);
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see be.ac.fundp.precise.processMediation.userEvent.webService.UiManager#outputOperation(String  userInteracId ,)String  role ,)String  processId ,)List<UiDataType>  data )*
     */
    public void outputOperation(Holder<String> userInteracId,Holder<String> role,Holder<String> processId, List<UiDataType> data) { 
    	LOG.info("Executing operation outputOperation");
        System.out.println(userInteracId);
        System.out.println(role);
        System.out.println(processId);
        System.out.println(data);
        try {
        	//logic.getDispatcher(role.value).requireOutputInteracion(processId.value, userInteracId.value, SoapServerUtil.uiDataType2ProvidedData(data), role.value);
        	clientMediator.requireOutputInteracion(processId.value, userInteracId.value, SoapServerUtil.uiDataType2ProvidedData(data), role.value);
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        System.out.println("Output Interaction DONE");
    }

    /* (non-Javadoc)
     * @see be.ac.fundp.precise.processMediation.userEvent.webService.UiManager#generateProcessId(*
     */
    public String generateProcessId() { 
    	LOG.info("Executing operation generateProcessId");
    	System.out.println("GEEEENNNNN");
        try {
            return DataManager.idGen.genId();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see be.ac.fundp.precise.processMediation.userEvent.webService.UiManager#pendingActions(String  role )*
     */
    public List<be.ac.fundp.precise.processMediation.userEvent.webService.PendingInteraction> pendingActions(String role) { 
        LOG.info("Executing operation pendingActions");
        System.out.println(role);
        try {
            List<be.ac.fundp.precise.processMediation.userEvent.webService.PendingInteraction> _return = new java.util.ArrayList<be.ac.fundp.precise.processMediation.userEvent.webService.PendingInteraction>();
            be.ac.fundp.precise.processMediation.userEvent.webService.PendingInteraction _returnVal1 = new be.ac.fundp.precise.processMediation.userEvent.webService.PendingInteraction();
            _returnVal1.setProcessId("ProcessId253639462");
            _returnVal1.setCuiId("CuiId183479899");
            _return.add(_returnVal1);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see be.ac.fundp.precise.processMediation.userEvent.webService.UiManager#registryRole(String  role ,)String  host )*
     */
    public void registryRole(String role,String host) { 
        LOG.info("Executing operation registryRole");
        System.out.println(role);
        System.out.println(host);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

}
